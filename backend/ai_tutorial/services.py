from django.conf import settings
from .models import Tutorial, TutorialStep, TutorialCategory, AITutorialRequest
from .ml_models import MLTutorialGenerator
from django.utils.text import slugify
import json
import logging

logger = logging.getLogger(__name__)


class AITutorialGenerator:
    def __init__(self):
        # Initialize ML-based generator
        self.ml_generator = MLTutorialGenerator()
        self.use_ml = getattr(settings, 'USE_ML_GENERATOR', True)
        
        if self.use_ml:
            logger.info("Using ML-based tutorial generation")
        else:
            logger.warning("Using mock AI tutorial generation - ML generator disabled")
    
    def generate_tutorial(self, request_obj):
        """Generate a complete tutorial using ML models or mock data"""
        try:
            # Update request status
            request_obj.status = 'processing'
            request_obj.save()
            
            if self.use_ml:
                # Use ML model
                tutorial_data = self.ml_generator.generate_tutorial(
                    request_obj.topic,
                    request_obj.description,
                    request_obj.difficulty
                )
            else:
                # Use mock data for development
                tutorial_data = self._create_mock_tutorial_data(
                    request_obj.topic,
                    request_obj.description,
                    request_obj.difficulty
                )
            
            # Create tutorial in database
            tutorial = self._create_tutorial_from_data(tutorial_data, request_obj)
            
            # Update request status
            request_obj.status = 'completed'
            request_obj.generated_tutorial = tutorial
            request_obj.save()
            
            return tutorial
            
        except Exception as e:
            logger.error(f"Error generating tutorial: {str(e)}")
            request_obj.status = 'failed'
            request_obj.error_message = str(e)
            request_obj.save()
            raise
    
    def _create_tutorial_from_data(self, data, request_obj):
        """Create Tutorial and TutorialStep objects from parsed data"""
        # Get or create category
        category, created = TutorialCategory.objects.get_or_create(
            name="AI Generated Tutorials",
            defaults={
                "description": "Tutorials automatically generated by AI",
                "icon": "fas fa-robot"
            }
        )
        
        # Generate unique slug
        base_slug = slugify(data['title'])
        slug = base_slug
        counter = 1
        while Tutorial.objects.filter(slug=slug).exists():
            slug = f"{base_slug}-{counter}"
            counter += 1
        
        # Create tutorial
        tutorial = Tutorial.objects.create(
            title=data['title'],
            slug=slug,
            category=category,
            description=data.get('description', ''),
            difficulty=request_obj.difficulty,
            estimated_duration=data.get('estimated_duration', 30),
            is_ai_generated=True
        )
        
        # Create tutorial steps
        for idx, step_data in enumerate(data.get('steps', []), 1):
            TutorialStep.objects.create(
                tutorial=tutorial,
                title=step_data.get('title', f'Step {idx}'),
                content=step_data.get('content', ''),
                code_example=step_data.get('code_example', ''),
                step_number=idx
            )
        
        return tutorial
    
    def get_tutorial_suggestions(self, topic):
        """Get AI-powered tutorial suggestions based on a topic"""
        try:
            if self.use_ml:
                # Use ML model for suggestions
                return self._create_ml_suggestions(topic)
            else:
                # Return mock suggestions for development
                return self._create_mock_suggestions(topic)
                
        except Exception as e:
            logger.error(f"Error getting tutorial suggestions: {str(e)}")
            return {"suggestions": []}
    
    def _create_ml_suggestions(self, topic):
        """Create tutorial suggestions using ML model"""
        try:
            # Generate suggestions using the ML model
            base_suggestions = self.ml_generator.tutorial_templates
            
            # Find related tutorials based on similarity
            related_tutorials = []
            for template in base_suggestions:
                if topic.lower() in template['topic'].lower() or \
                   topic.lower() in template['description'].lower():
                    related_tutorials.append({
                        "title": template['tutorial']['title'],
                        "description": template['tutorial']['description'],
                        "difficulty": template['difficulty'],
                        "estimated_duration": template['tutorial']['duration']
                    })
            
            # If no direct matches, create generic suggestions
            if not related_tutorials:
                related_tutorials = self._create_generic_suggestions(topic)
            
            return {"suggestions": related_tutorials[:5]}  # Return top 5
            
        except Exception as e:
            logger.error(f"Error creating ML suggestions: {str(e)}")
            return self._create_mock_suggestions(topic)
    
    def _create_generic_suggestions(self, topic):
        """Create generic suggestions for any topic"""
        return [
            {
                "title": f"Getting Started with {topic}",
                "description": f"A beginner-friendly introduction to {topic} fundamentals",
                "difficulty": "beginner",
                "estimated_duration": 30
            },
            {
                "title": f"Advanced {topic} Techniques",
                "description": f"Deep dive into advanced concepts and best practices for {topic}",
                "difficulty": "advanced",
                "estimated_duration": 90
            },
            {
                "title": f"Building a Real-World {topic} Application",
                "description": f"Step-by-step guide to building a production-ready application using {topic}",
                "difficulty": "intermediate",
                "estimated_duration": 120
            },
            {
                "title": f"{topic} Performance Optimization",
                "description": f"Learn how to optimize and scale your {topic} applications",
                "difficulty": "intermediate",
                "estimated_duration": 60
            },
            {
                "title": f"Testing and Debugging {topic}",
                "description": f"Comprehensive guide to testing strategies and debugging techniques for {topic}",
                "difficulty": "intermediate",
                "estimated_duration": 45
            }
        ]

    def _create_mock_suggestions(self, topic):
        """Create mock tutorial suggestions for development"""
        base_suggestions = [
            {
                "title": f"Getting Started with {topic}",
                "description": f"A beginner-friendly introduction to {topic} fundamentals",
                "difficulty": "beginner",
                "estimated_duration": 30
            },
            {
                "title": f"Advanced {topic} Techniques",
                "description": f"Deep dive into advanced concepts and best practices for {topic}",
                "difficulty": "advanced",
                "estimated_duration": 90
            },
            {
                "title": f"Building a Real-World {topic} Application",
                "description": f"Step-by-step guide to building a production-ready application using {topic}",
                "difficulty": "intermediate",
                "estimated_duration": 120
            },
            {
                "title": f"{topic} Performance Optimization",
                "description": f"Learn how to optimize and scale your {topic} applications",
                "difficulty": "intermediate",
                "estimated_duration": 60
            },
            {
                "title": f"Testing and Debugging {topic}",
                "description": f"Comprehensive guide to testing strategies and debugging techniques for {topic}",
                "difficulty": "intermediate",
                "estimated_duration": 45
            }
        ]
        
        return {"suggestions": base_suggestions}
    
    def _create_mock_tutorial_data(self, topic, description, difficulty):
        """Create mock tutorial data for development purposes"""
        difficulty_info = {
            'beginner': {
                'duration': 30,
                'step_count': 5,
                'complexity': 'simple'
            },
            'intermediate': {
                'duration': 60,
                'step_count': 8,
                'complexity': 'moderate'
            },
            'advanced': {
                'duration': 120,
                'step_count': 12,
                'complexity': 'complex'
            }
        }
        
        info = difficulty_info.get(difficulty, difficulty_info['intermediate'])
        
        mock_steps = []
        for i in range(1, info['step_count'] + 1):
            if i == 1:
                step = {
                    "title": f"Setting Up Your {topic} Environment",
                    "content": f"In this first step, we'll set up the development environment for {topic}. {description or 'This tutorial will guide you through the process step by step.'}",
                    "code_example": "# Install required dependencies\nnpm install express\n# or\npip install django"
                }
            elif i == 2:
                step = {
                    "title": f"Understanding {topic} Basics",
                    "content": f"Before diving into the implementation, let's understand the core concepts of {topic}. This foundational knowledge will help you build better applications.",
                    "code_example": "// Basic configuration\nconst config = {\n  name: 'my-app',\n  version: '1.0.0'\n};"
                }
            elif i == info['step_count']:
                step = {
                    "title": f"Testing and Deployment",
                    "content": f"In this final step, we'll test our {topic} implementation and prepare it for deployment. We'll cover best practices and common pitfalls to avoid.",
                    "code_example": "# Run tests\nnpm test\n# Build for production\nnpm run build"
                }
            else:
                step = {
                    "title": f"Implementing {topic} Feature {i-1}",
                    "content": f"Now we'll implement an important feature of {topic}. This step builds upon the previous concepts and adds {info['complexity']} functionality to your application.",
                    "code_example": f"// Feature implementation for step {i}\nfunction handle{topic.replace(' ', '')}() {{\n  // Implementation details here\n  return 'success';\n}}"
                }
            mock_steps.append(step)
        
        return {
            "title": f"Complete Guide to {topic}",
            "description": f"A comprehensive {difficulty} tutorial on {topic}. {description or 'Learn step-by-step how to implement and master this technology.'}",
            "estimated_duration": info['duration'],
            "prerequisites": ["Basic programming knowledge", "Familiarity with web development"],
            "steps": mock_steps
        }
