[
  {
    "topic": "Django REST API",
    "description": "Build a RESTful API with Django",
    "difficulty": "intermediate",
    "tutorial": {
      "title": "Building a Django REST API",
      "description": "Learn to create a robust RESTful API using Django REST Framework",
      "duration": 45,
      "prerequisites": [
        "Python basics",
        "Django fundamentals"
      ],
      "steps": [
        {
          "title": "Set up Django project",
          "content": "Create a new Django project and install Django REST Framework",
          "code": "django-admin startproject myapi\ncd myapi\npip install djangorestframework"
        },
        {
          "title": "Create API models",
          "content": "Define your data models for the API",
          "code": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()"
        },
        {
          "title": "Create serializers",
          "content": "Create serializers to convert model instances to JSON",
          "code": "from rest_framework import serializers\nfrom .models import Post\n\nclass PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = \"__all__\""
        },
        {
          "title": "Create API views",
          "content": "Build views to handle HTTP requests",
          "code": "from rest_framework import viewsets\nfrom .models import Post\nfrom .serializers import PostSerializer\n\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer"
        },
        {
          "title": "Configure URLs",
          "content": "Set up URL routing for your API endpoints",
          "code": "from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom . import views\n\nrouter = DefaultRouter()\nrouter.register(r\"posts\", views.PostViewSet)\n\nurlpatterns = [\n    path(\"api/\", include(router.urls)),\n]"
        }
      ]
    }
  },
  {
    "topic": "React Components",
    "description": "Create reusable React components",
    "difficulty": "beginner",
    "tutorial": {
      "title": "Building Reusable React Components",
      "description": "Learn to create modular and reusable React components",
      "duration": 30,
      "prerequisites": [
        "JavaScript basics",
        "React fundamentals"
      ],
      "steps": [
        {
          "title": "Create functional component",
          "content": "Start with a simple functional component",
          "code": "import React from \"react\";\n\nfunction Button({ text, onClick }) {\n  return (\n    <button onClick={onClick}>\n      {text}\n    </button>\n  );\n}\n\nexport default Button;"
        },
        {
          "title": "Add PropTypes",
          "content": "Define prop types for better development experience",
          "code": "import PropTypes from \"prop-types\";\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};"
        },
        {
          "title": "Add styling",
          "content": "Style your component with CSS modules or styled-components",
          "code": "import styles from \"./Button.module.css\";\n\nfunction Button({ text, onClick, variant = \"primary\" }) {\n  return (\n    <button \n      className={`${styles.button} ${styles[variant]}`}\n      onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n}"
        }
      ]
    }
  },
  {
    "topic": "Python Data Analysis",
    "description": "Analyze data with pandas and matplotlib",
    "difficulty": "intermediate",
    "tutorial": {
      "title": "Python Data Analysis with Pandas",
      "description": "Learn to analyze and visualize data using pandas and matplotlib",
      "duration": 60,
      "prerequisites": [
        "Python basics",
        "NumPy knowledge"
      ],
      "steps": [
        {
          "title": "Import libraries",
          "content": "Import necessary libraries for data analysis",
          "code": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns"
        },
        {
          "title": "Load data",
          "content": "Load your dataset into a pandas DataFrame",
          "code": "df = pd.read_csv(\"data.csv\")\nprint(df.head())\nprint(df.info())"
        },
        {
          "title": "Clean data",
          "content": "Handle missing values and clean your dataset",
          "code": "# Check for missing values\nprint(df.isnull().sum())\n\n# Fill missing values\ndf.fillna(df.mean(), inplace=True)\n\n# Remove duplicates\ndf.drop_duplicates(inplace=True)"
        },
        {
          "title": "Analyze data",
          "content": "Perform basic statistical analysis",
          "code": "# Basic statistics\nprint(df.describe())\n\n# Correlation matrix\ncorr_matrix = df.corr()\nprint(corr_matrix)"
        },
        {
          "title": "Visualize data",
          "content": "Create visualizations to understand your data",
          "code": "# Create plots\nplt.figure(figsize=(10, 6))\nplt.subplot(1, 2, 1)\nplt.hist(df[\"column1\"], bins=30)\nplt.title(\"Distribution of Column1\")\n\nplt.subplot(1, 2, 2)\nplt.scatter(df[\"column1\"], df[\"column2\"])\nplt.title(\"Column1 vs Column2\")\n\nplt.tight_layout()\nplt.show()"
        }
      ]
    }
  },
  {
    "topic": "Machine Learning",
    "description": "Build a machine learning model",
    "difficulty": "advanced",
    "tutorial": {
      "title": "Building Your First Machine Learning Model",
      "description": "Create a machine learning model using scikit-learn",
      "duration": 90,
      "prerequisites": [
        "Python",
        "NumPy",
        "Pandas",
        "Statistics"
      ],
      "steps": [
        {
          "title": "Import libraries",
          "content": "Import necessary machine learning libraries",
          "code": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt"
        },
        {
          "title": "Prepare data",
          "content": "Load and prepare your dataset for training",
          "code": "# Load data\ndf = pd.read_csv(\"dataset.csv\")\n\n# Define features and target\nX = df.drop(\"target\", axis=1)\ny = df[\"target\"]\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
        },
        {
          "title": "Train model",
          "content": "Create and train your machine learning model",
          "code": "# Create model\nmodel = LinearRegression()\n\n# Train model\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)"
        },
        {
          "title": "Evaluate model",
          "content": "Assess your model's performance",
          "code": "# Calculate metrics\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"Mean Squared Error: {mse:.2f}\")\nprint(f\"R\u00b2 Score: {r2:.2f}\")\n\n# Plot results\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], \"r--\")\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nplt.title(\"Actual vs Predicted\")\nplt.show()"
        }
      ]
    }
  }
]